@model CRM.Models.DTO.CustomerInvoiceDTO
@{
    int count = 0;
    DateTime date = DateTime.Now;
    string fordate = date.ToString("dd-MM-yyyy");
    if (Model.Ismail == true)
    {
        Layout = null;

    }
    else
    {
        Layout = "~/Views/Shared/_adminLayout.cshtml";
    }
}


<html lang="en">
<head>
    <title>Invoice</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;          
        }

        @@page {
            size: A4;
            margin: 10mm;
            padding: 40px;
/*             border: 1px solid #ccc;
 */        }

        .invoice-container {
            /*  width: 267mm;
              height: 378mm; */
            width: 210mm;
            height: max-content;
            margin: 2mm auto;
            padding: 20px;
            border: 1px solid #ccc;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid black;
            padding-bottom: 10px;
        }

            .header img {
                max-height: 60px;
            }

            .header div {
                text-align: right;
            }

        h1 {
            text-align: center;
            margin: 20px 0;
            font-size: 35px;
            text-transform: uppercase;
        }

        .invoice-details, .billing-details {
            margin-bottom: 20px;
            width: 100%;
            font-family: Arial, sans-serif;
        }

            .invoice-details table, .billing-details table {
                width: 100%;
                border-collapse: collapse;
            }

            .invoice-details td, .billing-details td {
                padding: 10px;
                vertical-align: top;
                border: 1px solid #ccc;
                font-size: 14px;
            }

            .invoice-details td {
                width: 50%;
            }

            .billing-details td {
                width: 50%;
            }

        strong {
            font-weight: bold;
        }

        td b {
            font-size: 16px;
            display: block;
        }

        .invoice-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

            .invoice-table th, .invoice-table td {
                border: 1px solid #000;
                padding: 8px;
                text-align: center;
            }

            .invoice-table th {
                background-color: #f2f2f2;
            }

        .totals {
            float: right;
            margin-top: -30px;
        }

            .totals table {
                width: 300px;
                border-collapse: collapse;
                margin-top: 10px;
            }

            .totals td {
                padding: 5px;
                border: 1px solid #ccc;
            }

        .bank-details {
            margin-top: -136px;
            padding-top: 32px;
            font-size: medium;
        }

        h6 {
            font-size: 14px;
            margin-bottom: 0;
            font-weight: 400;
        }

        .footer {
            clear: both;
            text-align: right;
            opacity: 0.8;
            filter: brightness(-10.8) contrast(1.8);
            margin-top: 95px;
        }

            .footer p {
                margin: 0;
            }

        .signature {
            margin-top: 50px;
        }

        .buttons {
            text-align: center;
            margin-top: 50px;
        }

            .buttons button {
                margin: 50px;
            }

        @@media (max-width: 768px) {
            .invoice-header {
                flex-direction: column;
                align-items: center;
            }

            .header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 2px solid black;
                padding-bottom: 10px;
            }

                .header img {
                    max-height: 60px;
                }

                .header div {
                    text-align: right;
                }
            .invoice-details {
                text-align: center;
                margin-top: 20px;
            }

            .invoice-table {
                font-size: 18px;
            }

            .invoice-summary {
                font-size: 14px;
            }
        }

        @@media (max-width: 480px) {
            .invoice-container {
                padding: 15px;
            }

            .company-info h1 {
                font-size: 20px;
            }

            .invoice-details h2 {
                font-size: 24px;
            }

            .invoice-summary p {
                font-size: 15px;
            }

            .invoice-footer {
                font-size: 12px;
            }
        }

        thead {
            display: table-header-group;
        }

        tfoot {
            display: table-row-group;
        }

        tr {
            page-break-inside: avoid;
        }



    </style>
</head>
<body>

    @if (Model.Ismail == false)
    {
        <div class="buttons">
            <button class="btn btn-primary" onclick="prepareForPrint()">Print</button>
            <button onclick="history.back()" class="btn btn-secondary">Back to List</button>
        </div>
    }

    <div class="invoice-container">

        <div class="header">
            @*             <img src="https://api.ndtechland.com/CompanyImage/638702230297411301.png" alt="Company Logo" class="logo"> *@
            <img src="@ViewBag.Protocol://@ViewBag.Host/CompanyImage/@Model.CompanyLogo" alt="Company Logo">
            <div>
                <h3>@Model.VendorCompanyName</h3>
                <p>
                    @Model.VendorOfficeAddress<br>
                    @Model.VendorOfficeCity<br>
                    @Model.VendorOfficeState<br>
                    @Model.VendorGstNumber
                </p>
            </div>

        </div>

        <h1>Tax Invoice</h1>

        <div class="invoice-details">
            <table>
                <tr>
                    <td>
                        <strong>Invoice Number:</strong> @Model.InvoiceNumber<br>
                        <strong>Invoice Date:</strong> @Model.InvoiceDate <br>
                        <strong>Due Date:</strong> @Model.InvoiceDueDate
                    </td>
                    <td>
                        <strong>Place of Supply:</strong> @Model.OfficeState
                    </td>
                </tr>
            </table>
        </div>

        <div class="billing-details">
            <table>
                <tr>
                    <td>
                        <strong>Bill To:</strong><br>
                        <b>@Model.CompanyName</b><br>
                        @Model.BillingAddress,<br>
                        @Model.BillingCity, @Model.BillingState<br>
                        <strong>GSTIN:</strong> @Model.CustomerGstNumber
                    </td>
                    <td>
                        <strong>Ship To:</strong><br>
                        <b>@Model.CompanyName</b><br>
                        @Model.OfficeAddress,<br>
                        @Model.OfficeCity, @Model.OfficeState<br>
                        <strong>GSTIN:</strong> @Model.CustomerGstNumber
                    </td>
                </tr>

            </table>
        </div>

        @{
            decimal? subtotal = 0;
            decimal? cgstAmount = 0;
            decimal? sgstAmount = 0;
            decimal? igstAmount = 0;
            decimal? igstper = 0;
            decimal? sgstper = 0;
            decimal? cgstper = 0;
            decimal? totalAmount = 0;
            decimal? rounding = 0;
            decimal? roundedTotal = 0;
            decimal? dueamount = 0;
            decimal? paidamount = 0;
            string? totalAmountwords = null;

            foreach (var item in Model.ProductDetailLists)
            {
                // Calculate subtotal
                subtotal += item.ProductPrice;
                igstper = item.IGST;
                sgstper = item.SGST;
                cgstper = item.CGST;
                dueamount = item.DueAmount;
                paidamount = item.PaidAmount;
                totalAmountwords = item.totalInWords;
                // Calculate CGST and SGST if applicable
                if (item.CGST != null && item.SGST != null)
                {
                    cgstAmount += (item.ProductRate * item.CGST / 100);
                    sgstAmount += (item.ProductRate * item.SGST / 100);
                }

                // Calculate IGST if applicable
                if (item.IGST != null)
                {
                    igstAmount += (item.ProductRate * item.IGST / 100);
                }
            }

            // Calculate total amount before rounding
            totalAmount = (subtotal ?? 0) + (cgstAmount ?? 0) + (sgstAmount ?? 0) + (igstAmount ?? 0);

            // Round the total amount
            roundedTotal = Math.Round((decimal)totalAmount, 0, MidpointRounding.AwayFromZero);

            // Calculate rounding difference (absolute value ensures it's always positive)
            rounding = Math.Abs((decimal)roundedTotal - (decimal)totalAmount);

            // Ensure totalAmount is rounded to two decimal places if required
            totalAmount = Math.Round((decimal)totalAmount, 2);


        }

        <table class="invoice-table" border="1" cellpadding="5" cellspacing="0">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Item & Description</th>
                    <th>HSN/SAC</th>
                    <th>Qty</th>
                    <th>Rate</th>
                    @if (igstper == null || igstper == 0)
                    {
                        <th>CGST</th>
                        <th>SGST</th>
                    }
                    else
                    {
                        <th>IGST</th>
                    }
                    <th>Amount</th>
                </tr>
            </thead>

            @foreach (var item in Model.ProductDetailLists)
            {
                count++;
                <tbody>
                    <tr>
                        <td>@count</td>
                        <td>@item.ProductName<br /><h6>@item.Description</h6></td>
                        <td>@item.HsnSacCode</td>
                        <td>@item.Qty</td>
                        <td>₹ @String.Format("{0:0.00}", item.ProductRate)</td>
                        @if (igstper == null || igstper == 0)
                        {
                            <td>@(item.CGST != null ? $"{item.CGST}% ₹ {item.ProductRate * item.CGST / 100}" : "0% ₹ 0.00")</td>
                            <td>@(item.SGST != null ? $"{item.SGST}% ₹ {item.ProductRate * item.SGST / 100}" : "0% ₹ 0.00")</td>
                        }
                        else
                        {
                            <td>@(item.IGST != null ? $"{item.IGST}% ₹ {item.ProductRate * item.IGST / 100}" : "0% ₹ 0.00")</td>
                        }
                        <td>₹ @String.Format("{0:0.00}", item.ProductPrice)</td>
                    </tr>
                </tbody>

            }
        </table>

        <div class="totals">
            <table>
                <tr>
                    <td><b>Sub Total</b></td>
                    <td>₹ @String.Format("{0:0.00}", subtotal)</td>
                </tr>
                @if (Model.IGST == null)
                {
                    <tr>
                        <td>CGST</td>
                        <td>₹ @String.Format("{0:0.00}", cgstAmount)</td>
                    </tr>
                    <tr>
                        <td>SGST</td>
                        <td>₹ @String.Format("{0:0.00}", sgstAmount)</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>IGST</td>
                        <td>₹ @String.Format("{0:0.00}", igstAmount)</td>
                    </tr>
                }
                <tr>
                    <td>Rounding</td>
                    <td>₹ @String.Format("{0:0.00}", rounding)</td>
                </tr>
                <tr>
                    <td><strong>Total</strong></td>
                    <td id="total"><strong>₹ @String.Format("{0:0.00}", roundedTotal)</strong></td>
                </tr>
                <tr>
                    <td>Payment Made</td>
                    <td>₹ @String.Format("{0:0.00}", paidamount)</td>
                </tr>
                <tr>
                    <td><strong>Balance Due</strong></td>
                    <td><strong>₹ @String.Format("{0:0.00}", dueamount)</strong></td>
                </tr>
            </table>
        </div>
        <div>
            <h6><strong>Total in Words<br /><span>@totalAmountwords</span></strong></h6>
        </div>
        <br />
        @if (!string.IsNullOrEmpty(@Model.Terms) && !string.IsNullOrEmpty(@Model.Notes))
        {
            <div>
                <h6><strong>Terms<br /><span>@Model.Terms</span></strong></h6>
                <h6><strong>Notes<br /><span>@Model.Notes</span></strong></h6>
            </div>
        }
       
        <div class="footer">
            <img src="@ViewBag.Protocol://@ViewBag.Host/CompanyImage/@Model.VendorSingature" alt="Singature Logo" style="background-color:transparent;height: 107px;width: 211px;">
            <p>Authorized Signatory</p>
        </div>
        <div class="bank-details">
            <strong>Bank Details</strong>
            <br />
            <strong>A/C Holder Name:</strong> @Model.AccountHolderName<br />
            <strong>
                Bank Name:
            </strong> @Model.BankName<br />
            <strong>Account Number:</strong> @Model.AccountNumber<br />
            <strong>IFSC Code:</strong> @Model.Ifsc
        </div>


    </div>

</body>
</html>



@* <script>
    document.addEventListener('DOMContentLoaded', function () {
        const totalText = document.getElementById('total')?.textContent?.replace('₹', '').trim() || '0';

        const totalAmount = parseFloat(totalText);

        if (isNaN(totalAmount)) {
            console.error('Invalid total amount');
            return;
        }
        const rupees = Math.floor(totalAmount);
        const totalInWords = `Indian Rupee ${convertNumberToWords(rupees)} Only`;
        const totalInWordsElement = document.getElementById('totalInWords');
        if (totalInWordsElement) {
            totalInWordsElement.textContent = totalInWords;
        }
        function convertNumberToWords(num) {
            const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
            const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            const thousands = ['', 'Thousand', 'Lakh', 'Crore'];

            if (num === 0) return 'Zero';
            let words = '';
            let i = 0;

            while (num > 0) {
                if (num % 1000 !== 0) {
                    words = `${convertHundreds(num % 1000)} ${thousands[i]} ${words}`.trim();
                }
                num = Math.floor(num / 1000);
                i++;
            }
            return words;
        }

        function convertHundreds(num) {
            const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
            const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

            if (num === 0) return '';
            if (num < 20) return ones[num];
            if (num < 100) return `${tens[Math.floor(num / 10)]} ${ones[num % 10]}`.trim();
            return `${ones[Math.floor(num / 100)]} Hundred ${convertHundreds(num % 100)}`.trim();
        }
    });
</script> *@
<script>
    function prepareForPrint() {
        const elementsToHide = ['.buttons', '.page-body-wrapper', '.page-main-header', '.page-sidebar'];

        elementsToHide.forEach(selector => {
            const element = document.querySelector(selector);
            if (element) {
                console.log(`Hiding element for print: ${selector}`);
                element.style.display = 'none';
            } else {
                console.log(`Element not found for print: ${selector}`);
            }
        });

        const printStyle = document.createElement('style');
        printStyle.type = 'text/css';
        printStyle.media = 'print';
        printStyle.innerHTML = `
                                            @@page {
                                                size: A4;
                                                margin: 10mm;
                                                padding: 20px;
                                            }
                                            body {
                                                margin: 0;
                                                padding: 0;
                                            }
                                        `;
        document.head.appendChild(printStyle);
        window.print();

        setTimeout(() => {
            elementsToHide.forEach(selector => {
                const element = document.querySelector(selector);
                if (element) {
                    console.log(`Restoring element: ${selector}`);
                    element.style.display = '';
                }
            });

            if (printStyle.parentNode) {
                document.head.removeChild(printStyle);
            }
        }, 500);
    }

    document.addEventListener('keydown', function (event) {
        if (event.ctrlKey && event.key === 'p') {
            event.preventDefault();
            prepareForPrint();
        }
    });

</script>



